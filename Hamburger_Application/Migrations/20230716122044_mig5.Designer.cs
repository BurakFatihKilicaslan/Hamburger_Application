// <auto-generated />
using System;
using Hamburger_Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hamburger_Application.Migrations
{
    [DbContext(typeof(HamburgerDbContext))]
    [Migration("20230716122044_mig5")]
    partial class mig5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "70b837b1-e620-4780-afac-b6fc771acac0",
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 836, DateTimeKind.Local).AddTicks(8884),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "a35a4f1b-950a-4e43-85d8-07608fa9e5a7",
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 836, DateTimeKind.Local).AddTicks(8901),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDark")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Dessert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("Desserts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(2391),
                            Name = "Brownie",
                            Piece = 1,
                            Price = 50m,
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(2399),
                            Name = "Milkshake",
                            Piece = 1,
                            Price = 40m,
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(2401),
                            Name = "Cheesecake",
                            Piece = 1,
                            Price = 60m,
                            isActive = false
                        },
                        new
                        {
                            Id = 4,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(2402),
                            Name = "Ice Cream",
                            Piece = 1,
                            Price = 30m,
                            isActive = false
                        },
                        new
                        {
                            Id = 5,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(2403),
                            Name = "Puding",
                            Piece = 1,
                            Price = 40m,
                            isActive = false
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasFilter("[MenuId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(3331),
                            Name = "Coke",
                            Piece = 1,
                            Price = 40m,
                            Size = 0,
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(3336),
                            Name = "Ayran",
                            Piece = 1,
                            Price = 25m,
                            Size = 0,
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(3338),
                            Name = "Coke Zero",
                            Piece = 1,
                            Price = 45m,
                            Size = 0,
                            isActive = false
                        },
                        new
                        {
                            Id = 4,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(3339),
                            Name = "Cold Tea",
                            Piece = 1,
                            Price = 35m,
                            Size = 0,
                            isActive = false
                        },
                        new
                        {
                            Id = 5,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(3340),
                            Name = "Mineral Water",
                            Piece = 1,
                            Price = 15m,
                            Size = 0,
                            isActive = false
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Fries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasFilter("[MenuId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.ToTable("Frieses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4213),
                            Name = "Potato",
                            Piece = 1,
                            Price = 20m,
                            Size = 0,
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4218),
                            Name = "Onion Ring",
                            Piece = 1,
                            Price = 22m,
                            Size = 0,
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4219),
                            Name = "Nugget",
                            Piece = 1,
                            Price = 25m,
                            Size = 0,
                            isActive = false
                        },
                        new
                        {
                            Id = 4,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4221),
                            Name = "Chicken Tenders",
                            Piece = 1,
                            Price = 25m,
                            Size = 0,
                            isActive = false
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Hamburger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasFilter("[MenuId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.ToTable("Hamburger");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4885),
                            Name = "Whopper",
                            Piece = 1,
                            Price = 120m,
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4890),
                            Name = "Texas SmokeHouse",
                            Piece = 1,
                            Price = 140m,
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4892),
                            Name = "Fish Royale",
                            Piece = 1,
                            Price = 110m,
                            isActive = false
                        },
                        new
                        {
                            Id = 4,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4893),
                            Name = "Big King",
                            Piece = 1,
                            Price = 150m,
                            isActive = false
                        },
                        new
                        {
                            Id = 5,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 837, DateTimeKind.Local).AddTicks(4895),
                            Name = "Chicken Royale",
                            Piece = 1,
                            Price = 95m,
                            isActive = false
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int?>("FriesId")
                        .HasColumnType("int");

                    b.Property<int?>("HamburgerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(1281),
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 1,
                            Name = "Whopper Menu",
                            Piece = 1,
                            Price = 150m,
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(1288),
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 2,
                            Name = "Texas SmokeHouse Menu",
                            Piece = 1,
                            Price = 170m,
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(1290),
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 3,
                            Name = "Fish Royale Menu",
                            Piece = 1,
                            Price = 140m,
                            isActive = false
                        },
                        new
                        {
                            Id = 4,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(1292),
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 4,
                            Name = "Big King Menu",
                            Piece = 1,
                            Price = 150m,
                            isActive = false
                        },
                        new
                        {
                            Id = 5,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(1293),
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 5,
                            Name = "Chicken Royale Menu",
                            Piece = 1,
                            Price = 120m,
                            isActive = false
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("Sauce");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(2877),
                            Name = "Ranch",
                            Piece = 1,
                            Price = 15m,
                            isActive = false
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(2885),
                            Name = "Ketchup",
                            Piece = 1,
                            Price = 10m,
                            isActive = false
                        },
                        new
                        {
                            Id = 3,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(2887),
                            Name = "Mayonnaise",
                            Piece = 1,
                            Price = 10m,
                            isActive = false
                        },
                        new
                        {
                            Id = 4,
                            CreationTime = new DateTime(2023, 7, 16, 15, 20, 41, 839, DateTimeKind.Local).AddTicks(2888),
                            Name = "Barbeque",
                            Piece = 1,
                            Price = 15m,
                            isActive = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Dessert", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Desserts")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Drink", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Menu", "Menu")
                        .WithOne("Drink")
                        .HasForeignKey("Hamburger_Application.Entities.Concrete.Drink", "MenuId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Fries", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Menu", "Menu")
                        .WithOne("Fries")
                        .HasForeignKey("Hamburger_Application.Entities.Concrete.Fries", "MenuId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Fries")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Hamburger", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Menu", "Menu")
                        .WithOne("Hamburger")
                        .HasForeignKey("Hamburger_Application.Entities.Concrete.Hamburger", "MenuId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Hamburgers")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Menu", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Menus")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Order", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Sauce", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Sauces")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Menu", b =>
                {
                    b.Navigation("Drink");

                    b.Navigation("Fries");

                    b.Navigation("Hamburger");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Order", b =>
                {
                    b.Navigation("Desserts");

                    b.Navigation("Drinks");

                    b.Navigation("Fries");

                    b.Navigation("Hamburgers");

                    b.Navigation("Menus");

                    b.Navigation("Sauces");
                });
#pragma warning restore 612, 618
        }
    }
}
