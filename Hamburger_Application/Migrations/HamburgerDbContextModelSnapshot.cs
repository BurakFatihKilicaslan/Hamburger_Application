// <auto-generated />
using System;
using Hamburger_Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hamburger_Application.Migrations
{
    [DbContext(typeof(HamburgerDbContext))]
    partial class HamburgerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            ConcurrencyStamp = "ffd5fb09-1d01-4b88-a168-aa21e891df3e",
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 49, DateTimeKind.Local).AddTicks(5652),
=======
                            ConcurrencyStamp = "088e2c97-d1d3-4549-b987-e7cb69081249",
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 249, DateTimeKind.Local).AddTicks(6327),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            ConcurrencyStamp = "ebbf8fe9-6313-476f-8620-70b515643957",
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 49, DateTimeKind.Local).AddTicks(5664),
=======
                            ConcurrencyStamp = "0de5ba68-1bdb-45a3-85da-ebc0dc5723e0",
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 249, DateTimeKind.Local).AddTicks(6344),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConfirmCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Dessert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Desserts");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(291),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(1323),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Brownie",
                            Photo = "cafddece-875e-4d0c-830c-72b3e194666c_Brownie.jpg",
                            Price = 50m
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(298),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(1334),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Milkshake",
                            Photo = "fb998a43-9809-4ebc-a546-ce63ca896be8_MilkShake.jpg",
                            Price = 40m
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(300),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(1336),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Cheesecake",
                            Photo = "ee446133-2bb0-46af-b257-3d1a8930432f_CheeseCake.jpg",
                            Price = 60m
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(302),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(1337),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Ice Cream",
                            Photo = "1d5c1238-10f9-49e6-a388-a541d1d64e4c_IcaCream.jpg",
                            Price = 30m
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(303),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(1338),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Puding",
                            Photo = "a01529c3-70cf-4b43-af5c-db1f8f9a921d_Puding.jpg",
                            Price = 40m
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasFilter("[MenuId] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(1993),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3655),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Coke-S",
                            Photo = "6240f4b6-c927-4898-9c76-6968b54c1e39_Coke.jpg",
                            Price = 40m,
                            Size = 0
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(1998),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3661),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Ayran-S",
                            Photo = "a7e28042-2e4a-443e-860d-0f0cbd0d640c_Ayran.jpg",
                            Price = 25m,
                            Size = 0
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(1999),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3663),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Coke Zero-S",
                            Photo = "1117576e-e2a3-42a5-8dc0-9f5d90fd0e80_CokeZero.jpg",
                            Price = 45m,
                            Size = 0
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2000),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3664),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Cold Tea-S",
                            Photo = "914e854b-f076-455c-aeab-49f8d8f4ca8e_ColdTea.jpg",
                            Price = 35m,
                            Size = 0
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2002),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3665),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Mineral Water-S",
                            Photo = "d2ffceeb-e929-43e1-9fc6-df7838fa6aa2_MineralWater.jpg",
                            Price = 15m,
                            Size = 0
                        },
                        new
                        {
                            Id = 6,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2003),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3667),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Coke-M",
                            Photo = "6240f4b6-c927-4898-9c76-6968b54c1e39_Coke.jpg",
                            Price = 45m,
                            Size = 2
                        },
                        new
                        {
                            Id = 7,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2005),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3669),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Ayran-M",
                            Photo = "a7e28042-2e4a-443e-860d-0f0cbd0d640c_Ayran.jpg",
                            Price = 30m,
                            Size = 2
                        },
                        new
                        {
                            Id = 8,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2006),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3671),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Coke Zero-M",
                            Photo = "1117576e-e2a3-42a5-8dc0-9f5d90fd0e80_CokeZero.jpg",
                            Price = 50m,
                            Size = 2
                        },
                        new
                        {
                            Id = 9,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2007),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3672),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Cold Tea-M",
                            Photo = "914e854b-f076-455c-aeab-49f8d8f4ca8e_ColdTea.jpg",
                            Price = 40m,
                            Size = 2
                        },
                        new
                        {
                            Id = 10,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2008),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3674),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Mineral Water-M",
                            Photo = "d2ffceeb-e929-43e1-9fc6-df7838fa6aa2_MineralWater.jpg",
                            Price = 20m,
                            Size = 2
                        },
                        new
                        {
                            Id = 11,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2010),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3675),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Coke-L",
                            Photo = "6240f4b6-c927-4898-9c76-6968b54c1e39_Coke.jpg",
                            Price = 50m,
                            Size = 3
                        },
                        new
                        {
                            Id = 12,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2011),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3677),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Ayran-L",
                            Photo = "a7e28042-2e4a-443e-860d-0f0cbd0d640c_Ayran.jpg",
                            Price = 35m,
                            Size = 3
                        },
                        new
                        {
                            Id = 13,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2013),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3678),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Coke Zero-L",
                            Photo = "1117576e-e2a3-42a5-8dc0-9f5d90fd0e80_CokeZero.jpg",
                            Price = 55m,
                            Size = 3
                        },
                        new
                        {
                            Id = 14,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2014),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3680),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Cold Tea-L",
                            Photo = "914e854b-f076-455c-aeab-49f8d8f4ca8e_ColdTea.jpg",
                            Price = 45m,
                            Size = 3
                        },
                        new
                        {
                            Id = 15,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(2015),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(3681),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Mineral Water-L",
                            Photo = "d2ffceeb-e929-43e1-9fc6-df7838fa6aa2_MineralWater.jpg",
                            Price = 25m,
                            Size = 3
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Fries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasFilter("[MenuId] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Frieses");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3785),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6086),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Potatoes - S",
                            Photo = "301422bb-3c9f-4670-87ec-52f6bb49510e_Potatoes.jpg",
                            Price = 20m,
                            Size = 0
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3791),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6091),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Onion Ring - S",
                            Photo = "40149d5b-324f-40d3-802c-0866bc9edac8_OnionRings.jpg",
                            Price = 22m,
                            Size = 0
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3795),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6093),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Nugget - S",
                            Photo = "f012288d-4cb5-4546-a5a1-82a2e34457ce_Nuggets.jpg",
                            Price = 25m,
                            Size = 0
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3797),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6094),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Chicken Tenders - S",
                            Photo = "1e165d0c-cdad-4956-a803-a291756320b1_ChickenTenders.jpg",
                            Price = 25m,
                            Size = 0
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3799),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6095),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Potatoes - M",
                            Photo = "301422bb-3c9f-4670-87ec-52f6bb49510e_Potatoes.jpg",
                            Price = 24m,
                            Size = 2
                        },
                        new
                        {
                            Id = 6,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3800),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6097),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Onion Ring - M",
                            Photo = "40149d5b-324f-40d3-802c-0866bc9edac8_OnionRings.jpg",
                            Price = 26m,
                            Size = 2
                        },
                        new
                        {
                            Id = 7,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3801),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6099),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Nugget - M",
                            Photo = "f012288d-4cb5-4546-a5a1-82a2e34457ce_Nuggets.jpg",
                            Price = 29m,
                            Size = 2
                        },
                        new
                        {
                            Id = 8,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3803),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6100),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Chicken Tenders - M",
                            Photo = "1e165d0c-cdad-4956-a803-a291756320b1_ChickenTenders.jpg",
                            Price = 29m,
                            Size = 2
                        },
                        new
                        {
                            Id = 9,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3804),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6101),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Potatoes - L",
                            Photo = "301422bb-3c9f-4670-87ec-52f6bb49510e_Potatoes.jpg",
                            Price = 28m,
                            Size = 3
                        },
                        new
                        {
                            Id = 10,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3806),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6102),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Onion Ring - L",
                            Photo = "40149d5b-324f-40d3-802c-0866bc9edac8_OnionRings.jpg",
                            Price = 30m,
                            Size = 3
                        },
                        new
                        {
                            Id = 11,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3807),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6103),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Nugget - L",
                            Photo = "f012288d-4cb5-4546-a5a1-82a2e34457ce_Nuggets.jpg",
                            Price = 33m,
                            Size = 3
                        },
                        new
                        {
                            Id = 12,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(3810),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(6104),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Chicken Tenders - L",
                            Photo = "1e165d0c-cdad-4956-a803-a291756320b1_ChickenTenders.jpg",
                            Price = 33m,
                            Size = 3
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Hamburger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasFilter("[MenuId] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Hamburger");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(5457),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(8145),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Whopper",
                            Photo = "27c952d4-c958-4bce-87ad-6cb40a743067_Whopper.jpg",
                            Price = 120m
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(5463),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(8150),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Texas SmokeHouse",
                            Photo = "43773966-353c-4741-9a0e-9d3642aea7e3_TexasSmokeHouse.jpg",
                            Price = 140m
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(5464),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(8152),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Fish Royale",
                            Photo = "074e56a6-ab87-48b1-b948-8ddc5ff84c97_FishRoyale.jpg",
                            Price = 110m
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(5465),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(8153),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Big King",
                            Photo = "e7bcba7f-5e1f-4b11-81fe-8f423b4bb26f_BigKing.jpg",
                            Price = 150m
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 50, DateTimeKind.Local).AddTicks(5466),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 250, DateTimeKind.Local).AddTicks(8154),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Chicken Royale",
                            Photo = "0c8d85ff-19e8-4550-b079-f83d1e8b863a_ChickenRoyale.jpg",
                            Price = 95m
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int?>("FriesId")
                        .HasColumnType("int");

                    b.Property<int?>("HamburgerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(2292),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 254, DateTimeKind.Local).AddTicks(7674),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 1,
                            IsActive = false,
                            Name = "Whopper Menu",
                            Photo = "085732b2-62a9-473a-9c94-198bf0b38d9c_WhopperMenu.jpg",
                            Price = 150m
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(2302),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 254, DateTimeKind.Local).AddTicks(7695),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 2,
                            IsActive = false,
                            Name = "Texas SmokeHouse Menu",
                            Photo = "03e49b85-7d1b-4a0e-8d18-47d97756a570_TexasSmokeHouseMenu.jpg",
                            Price = 170m
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(2305),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 254, DateTimeKind.Local).AddTicks(7699),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 3,
                            IsActive = false,
                            Name = "Fish Royale Menu",
                            Photo = "c7e2b9ad-b7b7-476f-9e1d-32c502cf5686_FishRoyaleMenu.jpg",
                            Price = 140m
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(2308),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 254, DateTimeKind.Local).AddTicks(7701),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 4,
                            IsActive = false,
                            Name = "Big King Menu",
                            Photo = "3ae527d5-e1ca-474d-b550-9acca3afb9b8_BigKingMenu.jpg",
                            Price = 150m
                        },
                        new
                        {
                            Id = 5,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(2310),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 254, DateTimeKind.Local).AddTicks(7704),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            DrinkId = 1,
                            FriesId = 1,
                            HamburgerId = 5,
                            IsActive = false,
                            Name = "Chicken Royale Menu",
                            Photo = "70e64328-09a0-4e6c-90c5-23868ba18a03_ChickenRoyaleMenu.jpg",
                            Price = 120m
                        });
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Piece")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Sauce");

                    b.HasData(
                        new
                        {
                            Id = 1,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(4607),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 255, DateTimeKind.Local).AddTicks(2583),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Ranch",
                            Photo = "7b5e0551-d08d-4092-8c72-ff370ea64c57_RanchSauce.jpg",
                            Price = 15m
                        },
                        new
                        {
                            Id = 2,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(4612),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 255, DateTimeKind.Local).AddTicks(2591),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Ketchup",
                            Photo = "f8b55022-2756-43dd-823d-6b94e43d9807_KetchupSauce.jpg",
                            Price = 10m
                        },
                        new
                        {
                            Id = 3,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(4614),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 255, DateTimeKind.Local).AddTicks(2594),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Mayonnaise",
                            Photo = "7821c0f8-2b4b-4b46-b958-6fe2dec26bd7_MayonaisseSauce.jpg",
                            Price = 10m
                        },
                        new
                        {
                            Id = 4,
<<<<<<< HEAD
                            CreationTime = new DateTime(2023, 7, 17, 16, 12, 48, 52, DateTimeKind.Local).AddTicks(4615),
=======
                            CreationTime = new DateTime(2023, 7, 17, 16, 11, 55, 255, DateTimeKind.Local).AddTicks(2596),
>>>>>>> 00ebea828e47fd9d888de455fa03c9ff02e748f9
                            IsActive = false,
                            Name = "Barbeque",
                            Photo = "cad13c53-f4c9-4b94-aaa7-cb20855cd41e_BarbequeSauce.jpg",
                            Price = 15m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Dessert", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Desserts")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Drink", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Menu", "Menu")
                        .WithOne("Drink")
                        .HasForeignKey("Hamburger_Application.Entities.Concrete.Drink", "MenuId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Drinks")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Fries", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Menu", "Menu")
                        .WithOne("Fries")
                        .HasForeignKey("Hamburger_Application.Entities.Concrete.Fries", "MenuId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Fries")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Hamburger", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Menu", "Menu")
                        .WithOne("Hamburger")
                        .HasForeignKey("Hamburger_Application.Entities.Concrete.Hamburger", "MenuId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Hamburgers")
                        .HasForeignKey("OrderId");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Menu", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Menus")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Order", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Sauce", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.Order", "Order")
                        .WithMany("Sauces")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Hamburger_Application.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Menu", b =>
                {
                    b.Navigation("Drink");

                    b.Navigation("Fries");

                    b.Navigation("Hamburger");
                });

            modelBuilder.Entity("Hamburger_Application.Entities.Concrete.Order", b =>
                {
                    b.Navigation("Desserts");

                    b.Navigation("Drinks");

                    b.Navigation("Fries");

                    b.Navigation("Hamburgers");

                    b.Navigation("Menus");

                    b.Navigation("Sauces");
                });
#pragma warning restore 612, 618
        }
    }
}
